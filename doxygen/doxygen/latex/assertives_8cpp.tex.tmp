\hypertarget{assertives_8cpp}{}\doxysection{assertives.\+cpp File Reference}
\label{assertives_8cpp}\index{assertives.cpp@{assertives.cpp}}


all \char`\"{}is\char`\"{} functions  


{\ttfamily \#include \char`\"{}constants.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}general.\+h\char`\"{}}\newline
{\ttfamily \#include $<$iostream$>$}\newline
Include dependency graph for assertives.\+cpp\+:
% FIG 0
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
bool \mbox{\hyperlink{assertives_8cpp_a9990c14f211e1c5760b612423b342c6f}{is\+Ghost\+In\+Cage}} (const \mbox{\hyperlink{struct_position}{Position}} \&pos\+Ghost, \mbox{\hyperlink{struct_param}{Param}} \&param)
\begin{DoxyCompactList}\small\item\em A function that checks if a ghost is currently in its cage. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{assertives_8cpp_a6597cb88146fea8e0069ae50170f7699}{is\+Encouter\+Ghost\+Pacman}} (\mbox{\hyperlink{struct_character}{Character}} \&ghost, \mbox{\hyperlink{struct_character}{Character}} \&pacman)
\begin{DoxyCompactList}\small\item\em A function that checks if the pacman and a ghost have encountered each other. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{assertives_8cpp_a99c698efb3f30c46e61095fe7fda6347}{is\+There\+AGhost\+In\+Cage}} (map$<$ string, \mbox{\hyperlink{struct_character}{Character}} $>$ \&character\+Map, \mbox{\hyperlink{struct_param}{Param}} \&param)
\item 
bool \mbox{\hyperlink{assertives_8cpp_a23b730f99dc9132a7343a500388c27e3}{is\+Free}} (char \&pos)
\begin{DoxyCompactList}\small\item\em A function that checks if a given position is free. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{assertives_8cpp_ac64fe106af1c9210606e29abdea0da41}{is\+Bubble}} (\mbox{\hyperlink{struct_position}{Position}} pos, vector$<$ string $>$ \&maze)
\item 
bool \mbox{\hyperlink{assertives_8cpp_aaf8a93032d34586dfdef1c682d01dcfe}{is\+Big\+Bubble}} (\mbox{\hyperlink{struct_position}{Position}} pos, vector$<$ string $>$ \&maze)
\item 
void \mbox{\hyperlink{assertives_8cpp_a5399ee2be06c9951cc917eb00528a2f9}{is\+Bubble\+Left}} (unsigned \&bubble\+Left, bool \&is\+Game\+Running, bool \&is\+Victory)
\begin{DoxyCompactList}\small\item\em A function that checks if all the bubbles have been eaten and sets the game state accordingly. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{assertives_8cpp_aa6baee65cfbb5c8acba18a073f8112b1}{is\+Move\+Possible}} (vector$<$ string $>$ \&maze, \mbox{\hyperlink{struct_character}{Character}} \&character, string direction)
\item 
bool \mbox{\hyperlink{assertives_8cpp_a511da31200fd09d874550dfee94c8166}{is\+Teleporter}} (vector$<$ string $>$ \&maze, \mbox{\hyperlink{struct_character}{Character}} \&character)
\item 
bool \mbox{\hyperlink{assertives_8cpp_ac7440ed3b9c179bfbc326f1ae864f871}{is\+Same\+Pos}} (\mbox{\hyperlink{struct_character}{Character}} \&character1, \mbox{\hyperlink{struct_character}{Character}} \&character2)
\begin{DoxyCompactList}\small\item\em A function that checks if two characters have the same position. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
all \char`\"{}is\char`\"{} functions 

\begin{DoxyAuthor}{Author}
Mathieu Leroux, Elliot Lartigaud, Gabriel Rouge, Alexis Delain, LÃ©o Oger 
\end{DoxyAuthor}
\begin{DoxyDate}{Date}
Janvier 2023 
\end{DoxyDate}


\doxysubsection{Function Documentation}
\mbox{\Hypertarget{assertives_8cpp_aaf8a93032d34586dfdef1c682d01dcfe}\label{assertives_8cpp_aaf8a93032d34586dfdef1c682d01dcfe}} 
\index{assertives.cpp@{assertives.cpp}!isBigBubble@{isBigBubble}}
\index{isBigBubble@{isBigBubble}!assertives.cpp@{assertives.cpp}}
\doxysubsubsection{\texorpdfstring{isBigBubble()}{isBigBubble()}}
{\footnotesize\ttfamily bool is\+Big\+Bubble (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{struct_position}{Position}}}]{pos,  }\item[{vector$<$ string $>$ \&}]{maze }\end{DoxyParamCaption})}

Here is the caller graph for this function\+:
% FIG 1
\mbox{\Hypertarget{assertives_8cpp_ac64fe106af1c9210606e29abdea0da41}\label{assertives_8cpp_ac64fe106af1c9210606e29abdea0da41}} 
\index{assertives.cpp@{assertives.cpp}!isBubble@{isBubble}}
\index{isBubble@{isBubble}!assertives.cpp@{assertives.cpp}}
\doxysubsubsection{\texorpdfstring{isBubble()}{isBubble()}}
{\footnotesize\ttfamily bool is\+Bubble (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{struct_position}{Position}}}]{pos,  }\item[{vector$<$ string $>$ \&}]{maze }\end{DoxyParamCaption})}

Here is the caller graph for this function\+:
% FIG 2
\mbox{\Hypertarget{assertives_8cpp_a5399ee2be06c9951cc917eb00528a2f9}\label{assertives_8cpp_a5399ee2be06c9951cc917eb00528a2f9}} 
\index{assertives.cpp@{assertives.cpp}!isBubbleLeft@{isBubbleLeft}}
\index{isBubbleLeft@{isBubbleLeft}!assertives.cpp@{assertives.cpp}}
\doxysubsubsection{\texorpdfstring{isBubbleLeft()}{isBubbleLeft()}}
{\footnotesize\ttfamily void is\+Bubble\+Left (\begin{DoxyParamCaption}\item[{unsigned \&}]{bubble\+Left,  }\item[{bool \&}]{is\+Game\+Running,  }\item[{bool \&}]{is\+Victory }\end{DoxyParamCaption})}



A function that checks if all the bubbles have been eaten and sets the game state accordingly. 


\begin{DoxyParams}{Parameters}
{\em bubble\+Left} & The number of bubbles left in the maze \\
\hline
{\em is\+Game\+Running} & A flag indicating if the game is running \\
\hline
{\em is\+Victory} & A flag indicating if the player has won \\
\hline
\end{DoxyParams}
Here is the call graph for this function\+:
% FIG 3
Here is the caller graph for this function\+:
% FIG 4
\mbox{\Hypertarget{assertives_8cpp_a6597cb88146fea8e0069ae50170f7699}\label{assertives_8cpp_a6597cb88146fea8e0069ae50170f7699}} 
\index{assertives.cpp@{assertives.cpp}!isEncouterGhostPacman@{isEncouterGhostPacman}}
\index{isEncouterGhostPacman@{isEncouterGhostPacman}!assertives.cpp@{assertives.cpp}}
\doxysubsubsection{\texorpdfstring{isEncouterGhostPacman()}{isEncouterGhostPacman()}}
{\footnotesize\ttfamily bool is\+Encouter\+Ghost\+Pacman (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{struct_character}{Character}} \&}]{ghost,  }\item[{\mbox{\hyperlink{struct_character}{Character}} \&}]{pacman }\end{DoxyParamCaption})}



A function that checks if the pacman and a ghost have encountered each other. 


\begin{DoxyParams}{Parameters}
{\em ghost} & The ghost character \\
\hline
{\em pacman} & The pacman character \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
true if the pacman and ghost have encountered each other, false otherwise 
\end{DoxyReturn}
Here is the caller graph for this function\+:
% FIG 5
\mbox{\Hypertarget{assertives_8cpp_a23b730f99dc9132a7343a500388c27e3}\label{assertives_8cpp_a23b730f99dc9132a7343a500388c27e3}} 
\index{assertives.cpp@{assertives.cpp}!isFree@{isFree}}
\index{isFree@{isFree}!assertives.cpp@{assertives.cpp}}
\doxysubsubsection{\texorpdfstring{isFree()}{isFree()}}
{\footnotesize\ttfamily bool is\+Free (\begin{DoxyParamCaption}\item[{char \&}]{pos }\end{DoxyParamCaption})}



A function that checks if a given position is free. 


\begin{DoxyParams}{Parameters}
{\em pos} & A character representing the position on the maze \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
true if the position is free, false otherwise 
\end{DoxyReturn}
Here is the caller graph for this function\+:
% FIG 6
\mbox{\Hypertarget{assertives_8cpp_a9990c14f211e1c5760b612423b342c6f}\label{assertives_8cpp_a9990c14f211e1c5760b612423b342c6f}} 
\index{assertives.cpp@{assertives.cpp}!isGhostInCage@{isGhostInCage}}
\index{isGhostInCage@{isGhostInCage}!assertives.cpp@{assertives.cpp}}
\doxysubsubsection{\texorpdfstring{isGhostInCage()}{isGhostInCage()}}
{\footnotesize\ttfamily bool is\+Ghost\+In\+Cage (\begin{DoxyParamCaption}\item[{const \mbox{\hyperlink{struct_position}{Position}} \&}]{pos\+Ghost,  }\item[{\mbox{\hyperlink{struct_param}{Param}} \&}]{param }\end{DoxyParamCaption})}



A function that checks if a ghost is currently in its cage. 


\begin{DoxyParams}{Parameters}
{\em pos\+Ghost} & The current position of the ghost \\
\hline
{\em param} & A struct containing the game\textquotesingle{}s parameters \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
true if the ghost is in its cage, false otherwise 
\end{DoxyReturn}
Here is the call graph for this function\+:
% FIG 7
Here is the caller graph for this function\+:
% FIG 8
\mbox{\Hypertarget{assertives_8cpp_aa6baee65cfbb5c8acba18a073f8112b1}\label{assertives_8cpp_aa6baee65cfbb5c8acba18a073f8112b1}} 
\index{assertives.cpp@{assertives.cpp}!isMovePossible@{isMovePossible}}
\index{isMovePossible@{isMovePossible}!assertives.cpp@{assertives.cpp}}
\doxysubsubsection{\texorpdfstring{isMovePossible()}{isMovePossible()}}
{\footnotesize\ttfamily bool is\+Move\+Possible (\begin{DoxyParamCaption}\item[{vector$<$ string $>$ \&}]{maze,  }\item[{\mbox{\hyperlink{struct_character}{Character}} \&}]{character,  }\item[{string}]{direction }\end{DoxyParamCaption})}

Here is the caller graph for this function\+:
% FIG 9
\mbox{\Hypertarget{assertives_8cpp_ac7440ed3b9c179bfbc326f1ae864f871}\label{assertives_8cpp_ac7440ed3b9c179bfbc326f1ae864f871}} 
\index{assertives.cpp@{assertives.cpp}!isSamePos@{isSamePos}}
\index{isSamePos@{isSamePos}!assertives.cpp@{assertives.cpp}}
\doxysubsubsection{\texorpdfstring{isSamePos()}{isSamePos()}}
{\footnotesize\ttfamily bool is\+Same\+Pos (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{struct_character}{Character}} \&}]{character1,  }\item[{\mbox{\hyperlink{struct_character}{Character}} \&}]{character2 }\end{DoxyParamCaption})}



A function that checks if two characters have the same position. 


\begin{DoxyParams}{Parameters}
{\em character1} & The first character object \\
\hline
{\em character2} & The second character object \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
true if the two characters have the same position, false otherwise 
\end{DoxyReturn}
Here is the caller graph for this function\+:
% FIG 10
\mbox{\Hypertarget{assertives_8cpp_a511da31200fd09d874550dfee94c8166}\label{assertives_8cpp_a511da31200fd09d874550dfee94c8166}} 
\index{assertives.cpp@{assertives.cpp}!isTeleporter@{isTeleporter}}
\index{isTeleporter@{isTeleporter}!assertives.cpp@{assertives.cpp}}
\doxysubsubsection{\texorpdfstring{isTeleporter()}{isTeleporter()}}
{\footnotesize\ttfamily bool is\+Teleporter (\begin{DoxyParamCaption}\item[{vector$<$ string $>$ \&}]{maze,  }\item[{\mbox{\hyperlink{struct_character}{Character}} \&}]{character }\end{DoxyParamCaption})}

Here is the call graph for this function\+:
% FIG 11
Here is the caller graph for this function\+:
% FIG 12
\mbox{\Hypertarget{assertives_8cpp_a99c698efb3f30c46e61095fe7fda6347}\label{assertives_8cpp_a99c698efb3f30c46e61095fe7fda6347}} 
\index{assertives.cpp@{assertives.cpp}!isThereAGhostInCage@{isThereAGhostInCage}}
\index{isThereAGhostInCage@{isThereAGhostInCage}!assertives.cpp@{assertives.cpp}}
\doxysubsubsection{\texorpdfstring{isThereAGhostInCage()}{isThereAGhostInCage()}}
{\footnotesize\ttfamily bool is\+There\+AGhost\+In\+Cage (\begin{DoxyParamCaption}\item[{map$<$ string, \mbox{\hyperlink{struct_character}{Character}} $>$ \&}]{character\+Map,  }\item[{\mbox{\hyperlink{struct_param}{Param}} \&}]{param }\end{DoxyParamCaption})}

Here is the call graph for this function\+:
% FIG 13
Here is the caller graph for this function\+:
% FIG 14
